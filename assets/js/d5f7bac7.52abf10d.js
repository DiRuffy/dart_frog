"use strict";(self.webpackChunkdart_frog_docs=self.webpackChunkdart_frog_docs||[]).push([[223],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>u});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=l(t),u=a,f=m["".concat(c,".").concat(u)]||m[u]||d[u]||o;return t?r.createElement(f,i(i({ref:n},p),{},{components:t})):r.createElement(f,i({ref:n},p))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},799:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=t(7462),a=(t(7294),t(3905));const o={sidebar_position:7,title:"\ud83c\udf31 Environments"},i="Environments \ud83c\udf31",s={unversionedId:"basics/environments",id:"basics/environments",title:"\ud83c\udf31 Environments",description:"There are many ways that environments can be configured in a Dart Frog application. The",source:"@site/docs/basics/environments.md",sourceDirName:"basics",slug:"/basics/environments",permalink:"/docs/basics/environments",draft:!1,editUrl:"https://github.com/VeryGoodOpenSource/dart_frog/tree/main/docs/docs/basics/environments.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7,title:"\ud83c\udf31 Environments"},sidebar:"docs",previous:{title:"\ud83d\udcc1 Serving Static Files",permalink:"/docs/basics/serving-static-files"},next:{title:"\ud83d\udcda Additional Resources",permalink:"/docs/basics/resources"}},c={},l=[],p={toc:l};function d(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"environments-"},"Environments \ud83c\udf31"),(0,a.kt)("p",null,"There are many ways that environments can be configured in a Dart Frog application. The\neasiest way is to use environment variables via the Dart SDK."),(0,a.kt)("p",null,"As seen in the ",(0,a.kt)("a",{parentName:"p",href:"/docs/basics/dependency-injection"},"dependency injection docs"),", middleware can be used to provide dependencies to an application."),(0,a.kt)("p",null,"Following this approach, the snippet shows how a database client can be configured with different environments."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"Handler middleware(Handler handler) {\n  return handler\n      .use(provider<CardsRepository>((_) {\n        return DatabaseClient(\n          dbUrl: Platform.environment['DB_URL'],\n          dbUser: Platform.environment['DB_USER'],\n          dbPassword: Platform.environment['DB_PASSWORD'],\n        );\n      }),\n    );\n}\n")),(0,a.kt)("p",null,"When running the server, these environment variables can be passed along directly to Dart Frog commands:"),(0,a.kt)("p",null,"Development server:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"DB_URL=... DB_USER=... DB_PASSWORD=... dart_frog server\n")),(0,a.kt)("p",null,"Production server:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"DB_URL=... DB_USER=... DB_PASSWORD=... dart build/server.dart\n")),(0,a.kt)("p",null,"These variables can also be exported in the current session:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"EXPORT DB_URL=...\nEXPORT DB_USER=...\nEXPORT DB_PASSWORD=...\n")),(0,a.kt)("admonition",{type:"warning"},(0,a.kt)("p",{parentName:"admonition"},"Accessing variables through ",(0,a.kt)("inlineCode",{parentName:"p"},"String.fromEnvironment")," in a Dart Frog application will not work.",(0,a.kt)("inlineCode",{parentName:"p"},"String.fromEnvironment")," is meant to accesses variables set by the Dart\ncompiler or runtime, which does not apply to a Dart Frog application. Instead, use\n",(0,a.kt)("inlineCode",{parentName:"p"},"Platform.environment"),".")))}d.isMDXComponent=!0}}]);