"use strict";(self.webpackChunkdart_frog_docs=self.webpackChunkdart_frog_docs||[]).push([[132],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function d(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):d(d({},t),e)),n},l=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),u=p(n),m=o,h=u["".concat(s,".").concat(m)]||u[m]||c[m]||r;return n?a.createElement(h,d(d({ref:t},l),{},{components:n})):a.createElement(h,d({ref:t},l))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,d=new Array(r);d[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,d[1]=i;for(var p=2;p<r;p++)d[p]=n[p];return a.createElement.apply(null,d)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},961:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>d,default:()=>c,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var a=n(7462),o=(n(7294),n(3905));const r={sidebar_position:4,title:"\ud83d\uddd2 Todos",description:'Build a simple "Todos" application.'},d="Todos \ud83d\uddd2",i={unversionedId:"tutorials/todos",id:"tutorials/todos",title:"\ud83d\uddd2 Todos",description:'Build a simple "Todos" application.',source:"@site/docs/tutorials/todos.md",sourceDirName:"tutorials",slug:"/tutorials/todos",permalink:"/docs/tutorials/todos",draft:!1,editUrl:"https://github.com/VeryGoodOpenSource/dart_frog/tree/main/docs/docs/tutorials/todos.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"\ud83d\uddd2 Todos",description:'Build a simple "Todos" application.'},sidebar:"docs",previous:{title:"\ud83d\udd22 Counter",permalink:"/docs/tutorials/counter"},next:{title:"\ud83d\udd0c WebSocket Counter",permalink:"/docs/tutorials/web_socket_counter"}},s={},p=[{value:"Overview",id:"overview",level:2},{value:"Creating a new app",id:"creating-a-new-app",level:2},{value:"Running the development server",id:"running-the-development-server",level:2},{value:"Todos Data Source",id:"todos-data-source",level:2},{value:"Creating <code>package:todos_data_source</code>",id:"creating-packagetodos_data_source",level:3},{value:"Updating the <code>pubspec.yaml</code>",id:"updating-the-pubspecyaml",level:3},{value:"Creating the <code>Todo</code> model",id:"creating-the-todo-model",level:3},{value:"Creating the <code>TodosDataSource</code>",id:"creating-the-todosdatasource",level:3},{value:"In-Memory Todos Data Source",id:"in-memory-todos-data-source",level:2},{value:"Creating <code>package:in_memory_todos_data_source</code>",id:"creating-packagein_memory_todos_data_source",level:3},{value:"Updating the <code>pubspec.yaml</code>",id:"updating-the-pubspecyaml-1",level:3},{value:"Creating the <code>InMemoryTodosDataSource</code>",id:"creating-the-inmemorytodosdatasource",level:3},{value:"Updating the <code>pubspec.yaml</code>",id:"updating-the-pubspecyaml-2",level:2},{value:"Creating middleware",id:"creating-middleware",level:2},{value:"Creating the <code>/todos</code> route",id:"creating-the-todos-route",level:2},{value:"Creating the <code>/todos/&lt;id&gt;</code> route",id:"creating-the-todosid-route",level:2},{value:"Summary",id:"summary",level:2}],l={toc:p};function c(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"todos-"},"Todos \ud83d\uddd2"),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("strong",{parentName:"p"},"Difficulty"),": \ud83d\udfe0 Intermediate",(0,o.kt)("br",null),"\n",(0,o.kt)("strong",{parentName:"p"},"Length"),": 30 minutes"),(0,o.kt)("p",{parentName:"admonition"},"Before getting started, ",(0,o.kt)("a",{parentName:"p",href:"/docs/overview#prerequisites"},"read the prerequisites")," to make sure your development environment is ready.")),(0,o.kt)("h2",{id:"overview"},"Overview"),(0,o.kt)("p",null,"In this tutorial, we're going to build an app that exposes two endpoints which allow us to perform ",(0,o.kt)("inlineCode",{parentName:"p"},"CRUD")," operations on a list of todos."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"CRUD")," stands for ",(0,o.kt)("inlineCode",{parentName:"p"},"create"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"read"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"update"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"delete"),".")),(0,o.kt)("p",null,"When we're done, we should have an app that supports the following requests:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'# Create a new todo\ncurl --request POST \\\n  --url http://localhost:8080/todos \\\n  --header \'Content-Type: application/json\' \\\n  --data \'{\n  "title": "Take out trash"\n}\'\n\n# Read all todos\ncurl --request GET \\\n  --url http://localhost:8080/todos\n\n# Read a specific todo by id\ncurl --request GET \\\n  --url http://localhost:8080/todos/<id>\n\n# Update a specific todo by id\ncurl --request PUT \\\n  --url http://localhost:8080/todos/<id> \\\n  --header \'Content-Type: application/json\' \\\n  --data \'{\n  "title": "Take out trash!",\n  "isCompleted": true\n}\'\n\n# Delete a specific todo by id\ncurl --request DELETE \\\n  --url http://localhost:8080/todos/<id>\n')),(0,o.kt)("h2",{id:"creating-a-new-app"},"Creating a new app"),(0,o.kt)("p",null,"To create a new Dart Frog app, open your terminal, ",(0,o.kt)("inlineCode",{parentName:"p"},"cd")," into the directory where you'd like to create the app, and run the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"dart_frog create todos\n")),(0,o.kt)("p",null,"You should see an output similar to:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"\u2713 Creating todos (0.1s)\n\u2713 Installing dependencies (1.7s)\n\nCreated todos at ./todos.\n\nGet started by typing:\n\ncd ./todos\ndart_frog dev\n")),(0,o.kt)("h2",{id:"running-the-development-server"},"Running the development server"),(0,o.kt)("p",null,"You should now have a directory called ",(0,o.kt)("inlineCode",{parentName:"p"},"todos")," -- ",(0,o.kt)("inlineCode",{parentName:"p"},"cd")," into it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cd todos\n")),(0,o.kt)("p",null,"Then, run the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"dart_frog dev\n")),(0,o.kt)("p",null,"This will start the development server on port ",(0,o.kt)("inlineCode",{parentName:"p"},"8080"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"\u2713 Running on http://localhost:8080 (1.3s)\nThe Dart VM service is listening on http://127.0.0.1:8181/YKEF_nbwOpM=/\nThe Dart DevTools debugger and profiler is available at: http://127.0.0.1:8181/YKEF_nbwOpM=/devtools/#/?uri=ws%3A%2F%2F127.0.0.1%3A8181%2FYKEF_nbwOpM%3D%2Fws\n[hotreload] Hot reload is enabled.\n")),(0,o.kt)("p",null,"Make sure it's working by opening ",(0,o.kt)("a",{parentName:"p",href:"http://localhost:8080"},"http://localhost:8080")," in your browser or via ",(0,o.kt)("inlineCode",{parentName:"p"},"cURL"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"curl --request GET \\\n  --url http://localhost:8080\n")),(0,o.kt)("p",null,"If everything succeeded, you should see ",(0,o.kt)("inlineCode",{parentName:"p"},"Welcome to Dart Frog!"),"."),(0,o.kt)("h2",{id:"todos-data-source"},"Todos Data Source"),(0,o.kt)("h3",{id:"creating-packagetodos_data_source"},"Creating ",(0,o.kt)("inlineCode",{parentName:"h3"},"package:todos_data_source")),(0,o.kt)("p",null,"Now that we have a running application, we need to define an abstraction for a todos data source which will be responsible for exposing APIs to perform C.R.U.D operations on a list of todos."),(0,o.kt)("p",null,"Since the todos data source is not tightly coupled to our Dart Frog application, we can create it as a package."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Decomposing a project into one or more packages is a form of modularization which can help with maintainability and reusability.")),(0,o.kt)("p",null,"In this tutorial, we're going to use ",(0,o.kt)("a",{parentName:"p",href:"https://pub.dev/packages/mason_cli"},"package:mason_cli")," to help us create new packages quickly."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"If you don't have ",(0,o.kt)("inlineCode",{parentName:"p"},"package:mason_cli")," installed, follow the ",(0,o.kt)("a",{parentName:"p",href:"https://pub.dev/packages/mason_cli#installation"},"installation directions")," before proceeding.")),(0,o.kt)("p",null,"Install the latest version of the ",(0,o.kt)("a",{parentName:"p",href:"https://brickhub.dev/bricks/very_good_dart_package"},"Very Good Dart Package")," by running:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"mason add -g very_good_dart_package\n")),(0,o.kt)("p",null,"Then we can create the ",(0,o.kt)("inlineCode",{parentName:"p"},"todos_data_source")," via:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'mason make very_good_dart_package --project_name "todos_data_source" --description "A generic interface for managing todos." -o packages\n')),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Alternatively you can run ",(0,o.kt)("inlineCode",{parentName:"p"},"mason make very_good_dart_package")," and fill out the interactive prompts.")),(0,o.kt)("p",null,"Now we should have the scaffolding for the ",(0,o.kt)("inlineCode",{parentName:"p"},"todos_data_source")," package under ",(0,o.kt)("inlineCode",{parentName:"p"},"packages/todos_data_source"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"\u251c\u2500\u2500 packages\n\u2502   \u2514\u2500\u2500 todos_data_source\n\u2502       \u251c\u2500\u2500 README.md\n\u2502       \u251c\u2500\u2500 analysis_options.yaml\n\u2502       \u251c\u2500\u2500 coverage_badge.svg\n\u2502       \u251c\u2500\u2500 lib\n\u2502       \u251c\u2500\u2500 pubspec.lock\n\u2502       \u251c\u2500\u2500 pubspec.yaml\n\u2502       \u2514\u2500\u2500 test\n")),(0,o.kt)("h3",{id:"updating-the-pubspecyaml"},"Updating the ",(0,o.kt)("inlineCode",{parentName:"h3"},"pubspec.yaml")),(0,o.kt)("p",null,"Next, let's update the ",(0,o.kt)("inlineCode",{parentName:"p"},"pubspec.yaml")," in the ",(0,o.kt)("inlineCode",{parentName:"p"},"todos_data_source")," to include the relevant dependencies:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"name: todos_data_source\ndescription: A generic interface for managing todos.\nversion: 0.1.0+1\npublish_to: none\n\nenvironment:\n  sdk: '>=2.19.0 <3.0.0'\n\ndependencies:\n  equatable: ^2.0.3\n  json_annotation: ^4.6.0\n  meta: ^1.7.0\n\ndev_dependencies:\n  build_runner: ^2.2.0\n  json_serializable: ^6.3.1\n  mocktail: ^1.0.0\n  test: ^1.19.2\n  very_good_analysis: ^5.0.0\n")),(0,o.kt)("p",null,"Install the newly added dependencies via:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"dart pub get\n")),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"Make sure to run the above command from within the ",(0,o.kt)("inlineCode",{parentName:"p"},"packages/todos_data_source")," directory.")),(0,o.kt)("h3",{id:"creating-the-todo-model"},"Creating the ",(0,o.kt)("inlineCode",{parentName:"h3"},"Todo")," model"),(0,o.kt)("p",null,"Next, let's define our todo model which will be a plain Dart class which represents a single todo item."),(0,o.kt)("p",null,"Create ",(0,o.kt)("inlineCode",{parentName:"p"},"lib/src/models/todo.dart")," with the following contents:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"import 'package:equatable/equatable.dart';\nimport 'package:json_annotation/json_annotation.dart';\nimport 'package:meta/meta.dart';\n\npart 'todo.g.dart';\n\n/// {@template todo}\n/// A single todo item.\n///\n/// Contains a [title], [description] and [id], in addition to a [isCompleted]\n/// flag.\n///\n/// If an [id] is provided, it cannot be empty. If no [id] is provided, one\n/// will be generated.\n///\n/// [Todo]s are immutable and can be copied using [copyWith], in addition to\n/// being serialized and deserialized using [toJson] and [fromJson]\n/// respectively.\n/// {@endtemplate}\n@immutable\n@JsonSerializable()\nclass Todo extends Equatable {\n  /// {@macro todo}\n  Todo({\n    this.id,\n    required this.title,\n    this.description = '',\n    this.isCompleted = false,\n  }) : assert(id == null || id.isNotEmpty, 'id cannot be empty');\n\n  /// The unique identifier of the todo.\n  ///\n  /// Cannot be empty.\n  final String? id;\n\n  /// The title of the todo.\n  ///\n  /// Note that the title may be empty.\n  final String title;\n\n  /// The description of the todo.\n  ///\n  /// Defaults to an empty string.\n  final String description;\n\n  /// Whether the todo is completed.\n  ///\n  /// Defaults to `false`.\n  final bool isCompleted;\n\n  /// Returns a copy of this todo with the given values updated.\n  ///\n  /// {@macro todo}\n  Todo copyWith({\n    String? id,\n    String? title,\n    String? description,\n    bool? isCompleted,\n  }) {\n    return Todo(\n      id: id ?? this.id,\n      title: title ?? this.title,\n      description: description ?? this.description,\n      isCompleted: isCompleted ?? this.isCompleted,\n    );\n  }\n\n  /// Deserializes the given `Map<String, dynamic>` into a [Todo].\n  static Todo fromJson(Map<String, dynamic> json) => _$TodoFromJson(json);\n\n  /// Converts this [Todo] into a `Map<String, dynamic>`.\n  Map<String, dynamic> toJson() => _$TodoToJson(this);\n\n  @override\n  List<Object?> get props => [id, title, description, isCompleted];\n}\n")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Todo")," class uses ",(0,o.kt)("a",{parentName:"p",href:"https://pub.dev/packages/json_serializable"},"package:json_serializable")," to handle generating the code to (de)serialize to and from JSON."),(0,o.kt)("p",{parentName:"admonition"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Todo")," class extends uses ",(0,o.kt)("a",{parentName:"p",href:"https://pub.dev/packages/equatable"},"package:equatable")," to override ",(0,o.kt)("inlineCode",{parentName:"p"},"==")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"hashCode")," so that we can compare ",(0,o.kt)("inlineCode",{parentName:"p"},"Todo")," instances by value.")),(0,o.kt)("p",null,"Next, we need to use ",(0,o.kt)("a",{parentName:"p",href:"https://pub.dev/packages/build_runner"},"package:build_runner")," to generate the relevant code for ",(0,o.kt)("inlineCode",{parentName:"p"},"json_serializable"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"dart run build_runner build --delete-conflicting-outputs\n")),(0,o.kt)("p",null,"We should see that the ",(0,o.kt)("inlineCode",{parentName:"p"},"todos.g.dart")," file was generated and our code should not have any errors or warnings at this point."),(0,o.kt)("p",null,"Let's add a barrel file to export our ",(0,o.kt)("inlineCode",{parentName:"p"},"models")," by creating ",(0,o.kt)("inlineCode",{parentName:"p"},"lib/src/models/models.dart")," and exporting ",(0,o.kt)("inlineCode",{parentName:"p"},"todos.dart"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"export 'todo.dart';\n")),(0,o.kt)("p",null,"Also, let's update the library exports to include the ",(0,o.kt)("inlineCode",{parentName:"p"},"models")," in ",(0,o.kt)("inlineCode",{parentName:"p"},"lib/todos_data_source.dart"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"/// A generic interface for managing todos.\nlibrary todos_data_source;\n\nexport 'src/models/models.dart';\nexport 'src/todos_data_source.dart';\n")),(0,o.kt)("p",null,"That's it for the ",(0,o.kt)("inlineCode",{parentName:"p"},"models"),". Next, we'll define the ",(0,o.kt)("inlineCode",{parentName:"p"},"TodosDataSource")," class."),(0,o.kt)("h3",{id:"creating-the-todosdatasource"},"Creating the ",(0,o.kt)("inlineCode",{parentName:"h3"},"TodosDataSource")),(0,o.kt)("p",null,"The last thing we need to do in the ",(0,o.kt)("inlineCode",{parentName:"p"},"todos_data_source")," package is define the ",(0,o.kt)("inlineCode",{parentName:"p"},"TodosDataSource")," class. It's going to be an ",(0,o.kt)("inlineCode",{parentName:"p"},"abstract")," class because it will serve as an interface which can have multiple concrete implementations."),(0,o.kt)("p",null,"Create ",(0,o.kt)("inlineCode",{parentName:"p"},"lib/src/todos_data_source.dart")," with the following contents:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"import 'package:todos_data_source/todos_data_source.dart';\n\n/// An interface for a todos data source.\n/// A todos data source supports basic C.R.U.D operations.\n/// * C - Create\n/// * R - Read\n/// * U - Update\n/// * D - Delete\nabstract class TodosDataSource {\n  /// Create and return the newly created todo.\n  Future<Todo> create(Todo todo);\n\n  /// Return all todos.\n  Future<List<Todo>> readAll();\n\n  /// Return a todo with the provided [id] if one exists.\n  Future<Todo?> read(String id);\n\n  /// Update the todo with the provided [id] to match [todo] and\n  /// return the updated todo.\n  Future<Todo> update(String id, Todo todo);\n\n  /// Delete the todo with the provided [id] if one exists.\n  Future<void> delete(String id);\n}\n")),(0,o.kt)("p",null,"We're done with the ",(0,o.kt)("inlineCode",{parentName:"p"},"todos_data_source"),"! Next, we'll create a concrete implementation of the ",(0,o.kt)("inlineCode",{parentName:"p"},"TodosDataSource")," interface which is backed by an in-memory cache."),(0,o.kt)("h2",{id:"in-memory-todos-data-source"},"In-Memory Todos Data Source"),(0,o.kt)("p",null,"Just like with the ",(0,o.kt)("inlineCode",{parentName:"p"},"todos_data_source"),", we'll create a new package called ",(0,o.kt)("inlineCode",{parentName:"p"},"in_memory_todos_data_source")," to contain the concrete implementation."),(0,o.kt)("h3",{id:"creating-packagein_memory_todos_data_source"},"Creating ",(0,o.kt)("inlineCode",{parentName:"h3"},"package:in_memory_todos_data_source")),(0,o.kt)("p",null,"From the root of the project we can use ",(0,o.kt)("inlineCode",{parentName:"p"},"mason make")," to generate a new Dart package again:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'mason make very_good_dart_package --project_name "in_memory_todos_data_source" --description "An in-memory implementation of the TodosDataSource interface." -o packages\n')),(0,o.kt)("h3",{id:"updating-the-pubspecyaml-1"},"Updating the ",(0,o.kt)("inlineCode",{parentName:"h3"},"pubspec.yaml")),(0,o.kt)("p",null,"Next, let's update the ",(0,o.kt)("inlineCode",{parentName:"p"},"pubspec.yaml")," in the ",(0,o.kt)("inlineCode",{parentName:"p"},"in_memory_todos_data_source")," to include the relevant dependencies:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"name: in_memory_todos_data_source\ndescription: An in-memory implementation of the TodosDataSource interface.\nversion: 0.1.0+1\npublish_to: none\n\nenvironment:\n  sdk: '>=2.19.0 <3.0.0'\n\ndependencies:\n  todos_data_source:\n    path: ../todos_data_source\n  uuid: ^3.0.6\n\ndev_dependencies:\n  mocktail: ^1.0.0\n  test: ^1.19.2\n  very_good_analysis: ^5.0.0\n")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"in_memory_todos_data_source")," depends on the ",(0,o.kt)("inlineCode",{parentName:"p"},"todos_data_source")," via ",(0,o.kt)("inlineCode",{parentName:"p"},"path"),".")),(0,o.kt)("p",null,"Install the newly added dependencies via:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"dart pub get\n")),(0,o.kt)("h3",{id:"creating-the-inmemorytodosdatasource"},"Creating the ",(0,o.kt)("inlineCode",{parentName:"h3"},"InMemoryTodosDataSource")),(0,o.kt)("p",null,"Next, let's update ",(0,o.kt)("inlineCode",{parentName:"p"},"lib/src/in_memory_todos_data_source.dart")," to implement the ",(0,o.kt)("inlineCode",{parentName:"p"},"TodosDataSource")," interface:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"import 'package:todos_data_source/todos_data_source.dart';\nimport 'package:uuid/uuid.dart';\n\n/// An in-memory implementation of the [TodosDataSource] interface.\nclass InMemoryTodosDataSource implements TodosDataSource {\n  /// Map of ID -> Todo\n  final _cache = <String, Todo>{};\n\n  @override\n  Future<Todo> create(Todo todo) async {\n    final id = const Uuid().v4();\n    final createdTodo = todo.copyWith(id: id);\n    _cache[id] = createdTodo;\n    return createdTodo;\n  }\n\n  @override\n  Future<List<Todo>> readAll() async => _cache.values.toList();\n\n  @override\n  Future<Todo?> read(String id) async => _cache[id];\n\n  @override\n  Future<Todo> update(String id, Todo todo) async {\n    return _cache.update(id, (value) => todo);\n  }\n\n  @override\n  Future<void> delete(String id) async => _cache.remove(id);\n}\n")),(0,o.kt)("p",null,"That's it! We're done making the data sources for our Dart Frog application and we're ready to start working on the Dart Frog app itself!"),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"You can create your own ",(0,o.kt)("inlineCode",{parentName:"p"},"TodosDataSource")," implementation that is backed by databases like ",(0,o.kt)("a",{parentName:"p",href:"https://pub.dev/packages/mysql1"},"mysql"),", ",(0,o.kt)("a",{parentName:"p",href:"https://pub.dev/packages/postgres"},"postgres"),", or ",(0,o.kt)("a",{parentName:"p",href:"https://pub.dev/packages/redis"},"redis"),".")),(0,o.kt)("h2",{id:"updating-the-pubspecyaml-2"},"Updating the ",(0,o.kt)("inlineCode",{parentName:"h2"},"pubspec.yaml")),(0,o.kt)("p",null,"The first thing we need to do is update the root ",(0,o.kt)("inlineCode",{parentName:"p"},"pubspec.yaml")," to contain the ",(0,o.kt)("inlineCode",{parentName:"p"},"todos_data_source")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"in_memory_todos_data_source")," dependencies:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"name: todos\ndescription: An example todos app built with Dart Frog.\nversion: 1.0.0+1\npublish_to: none\n\nenvironment:\n  sdk: '>=2.19.0 <3.0.0'\n\ndependencies:\n  dart_frog: ^0.3.0\n  in_memory_todos_data_source:\n    path: packages/in_memory_todos_data_source\n  todos_data_source:\n    path: packages/todos_data_source\n\ndev_dependencies:\n  mocktail: ^1.0.0\n  test: ^1.19.2\n  very_good_analysis: ^5.0.0\n")),(0,o.kt)("p",null,"Install the newly added dependencies via:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"dart pub get\n")),(0,o.kt)("h2",{id:"creating-middleware"},"Creating middleware"),(0,o.kt)("p",null,"Next, let's create a top-level piece of ",(0,o.kt)("inlineCode",{parentName:"p"},"middleware")," to provide the ",(0,o.kt)("inlineCode",{parentName:"p"},"TodosDataSource")," to all routes. Create ",(0,o.kt)("inlineCode",{parentName:"p"},"routes/_middleware.dart")," with the following contents:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"import 'package:dart_frog/dart_frog.dart';\nimport 'package:in_memory_todos_data_source/in_memory_todos_data_source.dart';\n\nfinal _dataSource = InMemoryTodosDataSource();\n\nHandler middleware(Handler handler) {\n  return handler\n      .use(requestLogger())\n      .use(provider<TodosDataSource>((_) => _dataSource));\n}\n")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"We're providing a single instance of the ",(0,o.kt)("inlineCode",{parentName:"p"},"TodosDataSource")," so we have a single source of data for the lifetime of the application."),(0,o.kt)("p",{parentName:"admonition"},"In addition, we're using the ",(0,o.kt)("inlineCode",{parentName:"p"},"requestLogger")," middleware from ",(0,o.kt)("inlineCode",{parentName:"p"},"package:dart_frog")," to log all requests for debugging.")),(0,o.kt)("h2",{id:"creating-the-todos-route"},"Creating the ",(0,o.kt)("inlineCode",{parentName:"h2"},"/todos")," route"),(0,o.kt)("p",null,"Next, delete the root route handler at ",(0,o.kt)("inlineCode",{parentName:"p"},"routes/index.dart")," and create a route handler for the ",(0,o.kt)("inlineCode",{parentName:"p"},"/todos")," endpoint by creating ",(0,o.kt)("inlineCode",{parentName:"p"},"routes/todos/index.dart"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"import 'dart:async';\nimport 'dart:io';\n\nimport 'package:dart_frog/dart_frog.dart';\nimport 'package:todos_data_source/todos_data_source.dart';\n\nFutureOr<Response> onRequest(RequestContext context) async {\n  switch (context.request.method) {\n    case HttpMethod.get:\n      return _get(context);\n    case HttpMethod.post:\n      return _post(context);\n    case HttpMethod.delete:\n    case HttpMethod.head:\n    case HttpMethod.options:\n    case HttpMethod.patch:\n    case HttpMethod.put:\n      return Response(statusCode: HttpStatus.methodNotAllowed);\n  }\n}\n\nFuture<Response> _get(RequestContext context) async {\n  final dataSource = context.read<TodosDataSource>();\n  final todos = await dataSource.readAll();\n  return Response.json(body: todos);\n}\n\nFuture<Response> _post(RequestContext context) async {\n  final dataSource = context.read<TodosDataSource>();\n  final todo = Todo.fromJson(await context.request.json());\n\n  return Response.json(\n    statusCode: HttpStatus.created,\n    body: await dataSource.create(todo),\n  );\n}\n")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"We're using ",(0,o.kt)("inlineCode",{parentName:"p"},"context.read<TodosDataSource>")," to access the provided instance of the ",(0,o.kt)("inlineCode",{parentName:"p"},"TodosDataSource"),".")),(0,o.kt)("p",null,"In this route handler, we only want to handle ",(0,o.kt)("inlineCode",{parentName:"p"},"GET")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"POST")," requests so we're using a ",(0,o.kt)("inlineCode",{parentName:"p"},"switch")," statement on ",(0,o.kt)("inlineCode",{parentName:"p"},"context.request.method"),". If the ",(0,o.kt)("inlineCode",{parentName:"p"},"HttpMethod")," is not ",(0,o.kt)("inlineCode",{parentName:"p"},"GET")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"POST"),", our route handler responds with a ",(0,o.kt)("inlineCode",{parentName:"p"},"405")," status code (method not allowed)."),(0,o.kt)("p",null,"In addition, we're using the ",(0,o.kt)("inlineCode",{parentName:"p"},"Response.json")," constructor to respond with ",(0,o.kt)("inlineCode",{parentName:"p"},"Content-Type: application/json"),"."),(0,o.kt)("p",null,"Next, we'll create a route handler for the ",(0,o.kt)("inlineCode",{parentName:"p"},"/todos/<id>")," endpoint so that we can handle operations for a specific todo."),(0,o.kt)("h2",{id:"creating-the-todosid-route"},"Creating the ",(0,o.kt)("inlineCode",{parentName:"h2"},"/todos/<id>")," route"),(0,o.kt)("p",null,"We can create a dynamic route to handle matching and ",(0,o.kt)("inlineCode",{parentName:"p"},"id")," by creating a file called: ",(0,o.kt)("inlineCode",{parentName:"p"},"routes/todos/[id].dart"),"."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Dynamic routes allow you to have one or more dynamic path segments in your route. Learn more about ",(0,o.kt)("a",{parentName:"p",href:"/docs/basics/routes#dynamic-routes-"},"dynamic routes"),".")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"import 'dart:async';\nimport 'dart:io';\n\nimport 'package:dart_frog/dart_frog.dart';\nimport 'package:todos_data_source/todos_data_source.dart';\n\nFutureOr<Response> onRequest(RequestContext context, String id) async {\n  final dataSource = context.read<TodosDataSource>();\n  final todo = await dataSource.read(id);\n\n  if (todo == null) {\n    return Response(statusCode: HttpStatus.notFound, body: 'Not found');\n  }\n\n  switch (context.request.method) {\n    case HttpMethod.get:\n      return _get(context, todo);\n    case HttpMethod.put:\n      return _put(context, id, todo);\n    case HttpMethod.delete:\n      return _delete(context, id);\n    case HttpMethod.head:\n    case HttpMethod.options:\n    case HttpMethod.patch:\n    case HttpMethod.post:\n      return Response(statusCode: HttpStatus.methodNotAllowed);\n  }\n}\n\nFuture<Response> _get(RequestContext context, Todo todo) async {\n  return Response.json(body: todo);\n}\n\nFuture<Response> _put(RequestContext context, String id, Todo todo) async {\n  final dataSource = context.read<TodosDataSource>();\n  final updatedTodo = Todo.fromJson(await context.request.json());\n  final newTodo = await dataSource.update(\n    id,\n    todo.copyWith(\n      title: updatedTodo.title,\n      description: updatedTodo.description,\n      isCompleted: updatedTodo.isCompleted,\n    ),\n  );\n\n  return Response.json(body: newTodo);\n}\n\nFuture<Response> _delete(RequestContext context, String id) async {\n  final dataSource = context.read<TodosDataSource>();\n  await dataSource.delete(id);\n  return Response(statusCode: HttpStatus.noContent);\n}\n")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"onRequest")," now has two parameters: ",(0,o.kt)("inlineCode",{parentName:"p"},"RequestContext"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"id"),". The ",(0,o.kt)("inlineCode",{parentName:"p"},"id")," path segment is forwarded to the ",(0,o.kt)("inlineCode",{parentName:"p"},"onRequest")," method call.")),(0,o.kt)("p",null,"Just like in the ",(0,o.kt)("inlineCode",{parentName:"p"},"/todos")," route handler, we are switching on the ",(0,o.kt)("inlineCode",{parentName:"p"},"context.request.method")," and selectively handling ",(0,o.kt)("inlineCode",{parentName:"p"},"GET"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"PUT"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"DELETE")," requests."),(0,o.kt)("h2",{id:"summary"},"Summary"),(0,o.kt)("p",null,"Be sure to save all the changes and hot reload should kick in \u26a1\ufe0f"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"[hotreload] - Application reloaded.\n")),(0,o.kt)("p",null,"You should now be able to make requests to create, read, update, and delete todos:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'# Create a new todo\ncurl --request POST \\\n  --url http://localhost:8080/todos \\\n  --header \'Content-Type: application/json\' \\\n  --data \'{\n  "title": "Take out trash"\n}\'\n\n# Read all todos\ncurl --request GET \\\n  --url http://localhost:8080/todos\n\n# Read a specific todo by id\ncurl --request GET \\\n  --url http://localhost:8080/todos/<id>\n\n# Update a specific todo by id\ncurl --request PUT \\\n  --url http://localhost:8080/todos/<id> \\\n  --header \'Content-Type: application/json\' \\\n  --data \'{\n  "title": "Take out trash!",\n  "isCompleted": true\n}\'\n\n# Delete a specific todo by id\ncurl --request DELETE \\\n  --url http://localhost:8080/todos/<id>\n')),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"You should see detailed request logs in the console due to the ",(0,o.kt)("inlineCode",{parentName:"p"},"requestLogger")," middleware that look similar to:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"2022-08-09T17:43:35.816387  0:00:00.016484 GET     [200] /todos\n2022-08-09T17:44:05.561021  0:00:00.022465 POST    [201] /todos\n"))),(0,o.kt)("p",null,"\ud83c\udf89 Congrats, you've created a ",(0,o.kt)("inlineCode",{parentName:"p"},"todos")," application using Dart Frog. View the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/VeryGoodOpenSource/dart_frog/tree/main/examples/todos"},"full source code"),"."))}c.isMDXComponent=!0}}]);