"use strict";(self.webpackChunkdart_frog_docs=self.webpackChunkdart_frog_docs||[]).push([[932],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(t),m=o,f=u["".concat(l,".").concat(m)]||u[m]||d[m]||a;return t?r.createElement(f,i(i({ref:n},p),{},{components:t})):r.createElement(f,i({ref:n},p))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},6746:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=t(7462),o=(t(7294),t(3905));const a={sidebar_position:7,title:"\ud83c\udf31 Environments"},i="Environments \ud83c\udf31",s={unversionedId:"basics/enviroments",id:"basics/enviroments",title:"\ud83c\udf31 Environments",description:"---",source:"@site/docs/basics/enviroments.md",sourceDirName:"basics",slug:"/basics/enviroments",permalink:"/docs/basics/enviroments",draft:!1,editUrl:"https://github.com/VeryGoodOpenSource/dart_frog/tree/main/docs/docs/basics/enviroments.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7,title:"\ud83c\udf31 Environments"},sidebar:"docs",previous:{title:"\ud83d\udcc1 Serving Static Files",permalink:"/docs/basics/serving-static-files"},next:{title:"\ud83d\udcda Additional Resources",permalink:"/docs/basics/resources"}},l={},c=[],p={toc:c};function d(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"environments-"},"Environments \ud83c\udf31"),(0,o.kt)("hr",null),(0,o.kt)("p",null,"The ability of configuring different environments is necessary for any real world applications."),(0,o.kt)("p",null,"The application needs to be able be configured to run a development environment, or a staging one\nand ultimately, a production one."),(0,o.kt)("p",null,"There are many ways that different environments can be achieved in a Dart Frog application, the\nout of the box one is by making the use of environment variables, which is a feature provided\ndirectly from the Dart SDK."),(0,o.kt)("p",null,"As seen in the Dependency injection example, middleware can be used to provide dependencies\nto the application."),(0,o.kt)("p",null,"Following that approach, the snippet bellow can be used to exemplify how a database client that\ncan be is configured through different environments can be provided to the application."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"Handler middleware(Handler handler) {\n  return handler\n      .use(provider<CardsRepository>((_) {\n        return DatabaseClient(\n          dbUrl: Platform.environment['DB_URL'],\n          dbUser: Platform.environment['DB_USER'],\n          dbPassword: Platform.environment['DB_PASSWORD'],\n        );\n      }),\n    );\n}\n")),(0,o.kt)("p",null,"Then, when running the server, those variables can be passed along directly on the Dart Frog\ncommands, like:"),(0,o.kt)("p",null,"For development server:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"DB_URL=... DB_USER=... DB_PASSWORD=... dart_frog server\n")),(0,o.kt)("p",null,"For production server"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"DB_URL=... DB_USER=... DB_PASSWORD=... dart build/server.dart\n")),(0,o.kt)("p",null,"For convenience, these variables can also be exported in the current session."),(0,o.kt)("admonition",{type:"warning"},(0,o.kt)("p",{parentName:"admonition"},"Commonly used in Flutter applications, accessing variables through ",(0,o.kt)("inlineCode",{parentName:"p"},"String.fromEnvironment")," in\na Dart frog application will not work, that method is meant to accesses variables set by the dart\ncompiler or runtime, which doesn't apply on a Dart frog application. Due that\n",(0,o.kt)("inlineCode",{parentName:"p"},"Platform.environment")," should be used instead.")))}d.isMDXComponent=!0}}]);