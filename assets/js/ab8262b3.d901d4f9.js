"use strict";(self.webpackChunkdart_frog_docs=self.webpackChunkdart_frog_docs||[]).push([[98],{7195:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>d,metadata:()=>c,toc:()=>s});var t=r(5893),i=r(1151);const d={sidebar_position:3,title:"\ud83d\udc89 Dependency Injection"},a="Dependency Injection \ud83d\udc89",c={id:"basics/dependency-injection",title:"\ud83d\udc89 Dependency Injection",description:"Middleware can be used to inject dependencies into a RequestContext via a provider.",source:"@site/docs/basics/dependency-injection.md",sourceDirName:"basics",slug:"/basics/dependency-injection",permalink:"/docs/basics/dependency-injection",draft:!1,unlisted:!1,editUrl:"https://github.com/VeryGoodOpenSource/dart_frog/tree/main/docs/docs/basics/dependency-injection.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"\ud83d\udc89 Dependency Injection"},sidebar:"docs",previous:{title:"\ud83c\udf54 Middleware",permalink:"/docs/basics/middleware"},next:{title:"\ud83e\uddea Testing",permalink:"/docs/basics/testing"}},o={},s=[{value:"Provider",id:"provider",level:2},{value:"Basics",id:"basics",level:3},{value:"Extracting Providers",id:"extracting-providers",level:3},{value:"Providing Asynchronous Values",id:"providing-asynchronous-values",level:3},{value:"Lazy Initialization",id:"lazy-initialization",level:3},{value:"Caching",id:"caching",level:3}];function l(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"dependency-injection-",children:"Dependency Injection \ud83d\udc89"}),"\n",(0,t.jsxs)(n.p,{children:["Middleware can be used to inject dependencies into a ",(0,t.jsx)(n.code,{children:"RequestContext"})," via a ",(0,t.jsx)(n.code,{children:"provider"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"provider",children:"Provider"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"provider"})," is a type of middleware that can create and provide an instance of type ",(0,t.jsx)(n.code,{children:"T"})," to the request context. The ",(0,t.jsx)(n.code,{children:"create"})," callback is called lazily and the injected ",(0,t.jsx)(n.code,{children:"RequestContext"})," can be used to perform additional lookups to access values provided upstream."]}),"\n",(0,t.jsx)(n.h3,{id:"basics",children:"Basics"}),"\n",(0,t.jsxs)(n.p,{children:["In the following example, we'll use a ",(0,t.jsx)(n.code,{children:"provider"})," to inject a ",(0,t.jsx)(n.code,{children:"String"})," into our request context."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"import 'package:dart_frog/dart_frog.dart';\n\nHandler middleware(Handler handler) {\n  return handler.use(provider<String>((context) => 'Welcome to Dart Frog!'));\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["We can later access the provided value from within a route handler using ",(0,t.jsx)(n.code,{children:"context.read<T>()"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"import 'package:dart_frog/dart_frog.dart';\n\nResponse onRequest(RequestContext context) {\n  final greeting = context.read<String>();\n  return Response(body: greeting);\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"extracting-providers",children:"Extracting Providers"}),"\n",(0,t.jsxs)(n.p,{children:["In the above example, we defined the ",(0,t.jsx)(n.code,{children:"provider"})," inline. This is fine for simple cases, but for more complex providers or providers which you want to reuse, it can be helpful to extract the provider to its own file:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"Middleware greetingProvider() {\n  return provider<String>((context) => 'Hello World');\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Then, we can import and use the provider in one or more middleware:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"Handler middleware(Handler handler) {\n  return handler.use(greetingProvider());\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"providing-asynchronous-values",children:"Providing Asynchronous Values"}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.code,{children:"provider"})," can also be used to inject asynchronous values -- we just need to change the generic type to a ",(0,t.jsx)(n.code,{children:"Future"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"Middleware asyncGreetingProvider() {\n  return provider<Future<String>>((context) async => 'Hello World');\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"We can then use the provider in one or more middleware just as before:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"Handler middleware(Handler handler) {\n  return handler.use(asyncGreetingProvider());\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Later, we can read the async value from a route handler via ",(0,t.jsx)(n.code,{children:"context.read"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"Future<Response> onRequest(RequestContext context) async {\n  final value = await context.read<Future<String>>();\n  return Response(body: value);\n}\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["When accessing a ",(0,t.jsx)(n.code,{children:"Future"})," via ",(0,t.jsx)(n.code,{children:"context.read"})," be sure to specify the ",(0,t.jsx)(n.code,{children:"Future"})," as the generic type and ",(0,t.jsx)(n.code,{children:"await"})," the result."]})}),"\n",(0,t.jsxs)(n.admonition,{type:"tip",children:[(0,t.jsx)(n.p,{children:"You can create a custom extension if you prefer:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"extension ReadAsync on RequestContext {\n  Future<T> readAsync<T extends Object>() => read<Future<T>>();\n}\n"})}),(0,t.jsxs)(n.p,{children:["With the above extension, you can access the provided ",(0,t.jsx)(n.code,{children:"Future"})," like:"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"Future<Response> onRequest(RequestContext context) async {\n  final value = await context.readAsync<String>();\n  return Response(body: value);\n}\n"})})]}),"\n",(0,t.jsx)(n.h3,{id:"lazy-initialization",children:"Lazy Initialization"}),"\n",(0,t.jsxs)(n.p,{children:["By default, ",(0,t.jsx)(n.code,{children:"provider"})," creates the provided value only when it is accessed. For example, given the following middleware:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"import 'package:dart_frog/dart_frog.dart';\n\nHandler middleware(Handler handler) {\n  return handler.use(\n    provider<String>((context) {\n      // This code will never execute if `context.read<String>()` isn't called.\n      print('create!');\n      return 'Welcome to Dart Frog!';\n    }),\n  );\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["If we have a route handler that never invokes ",(0,t.jsx)(n.code,{children:"context.read<String>()"}),", our value will never be created, and ",(0,t.jsx)(n.code,{children:"create!"})," will never be logged:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"import 'package:dart_frog/dart_frog.dart';\n\nResponse onRequest(RequestContext context) => Response();\n"})}),"\n",(0,t.jsx)(n.h3,{id:"caching",children:"Caching"}),"\n",(0,t.jsxs)(n.p,{children:["By default, a provided value will be created when it is accessed. This means that each time you read a value via ",(0,t.jsx)(n.code,{children:"context.read"}),", the associated ",(0,t.jsx)(n.code,{children:"create"})," method will be invoked."]}),"\n",(0,t.jsx)(n.p,{children:"As a result, you may wish to cache a provided value so that it isn't unnecessarily recreated on each read. We can do this quite easily by defining a provide value which we use to reference the provided value once it is created."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"String? _greeting;\n\nMiddleware cachedGreetingProvider() {\n  return provider<String>((context) => _greeting ??= 'Hello World');\n}\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["The cached ",(0,t.jsx)(n.code,{children:"_greeting"})," is private so that it can only be accessed within the context of this provider."]})}),"\n",(0,t.jsx)(n.p,{children:"This pattern can also be applied to async providers:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"String? _greeting;\n\nMiddleware cachedAsyncGreetingProvider() {\n  return provider<Future<String>>((context) async => _greeting ??= 'Hello World');\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"With the above implementations, the greeting will only be computed once and the cached value will be used for the duration of the application lifecycle."})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},1151:(e,n,r)=>{r.d(n,{Z:()=>c,a:()=>a});var t=r(7294);const i={},d=t.createContext(i);function a(e){const n=t.useContext(d);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(d.Provider,{value:n},e.children)}}}]);